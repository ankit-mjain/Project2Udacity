Description: "This script would be used to create stck as required for Project 2"

Parameters:

    EnvironmentName:
        Description: Environment Name for the Project
        Type: String

    VpcCIDR:
        Description: Enter the CIDR value for the VPC
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Public Subnet 1 
        Type: String 
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Public Subnet 2 
        Type: String 
        Default: 10.0.1.0/24

    PrivateSubnet1CIDR:
        Description: Private Subnet 1 
        Type: String 
        Default: 10.0.2.0/24

    PrivateSubnet2CIDR:
        Description: Private Subnet 2 
        Type: String 
        Default: 10.0.3.0/24

    AZ1a:
        Description: ap-south-1a Availability Zone in Mumbai 
        Type: String 
        Default: ap-south-1a

    AZ1b:
        Description: ap-south-1b Availability Zone in Mumbai 
        Type: String 
        Default: ap-south-1b

    AMIId:
        Description: Ubuntu AMI Id
        Type: String 
        Default: ami-04bde106886a53080

    InstanceTypeValue:
        Description: Instance Type
        Type: String 
        Default: t2.micro

    PrivateKeyName:
        Description: Key Name
        Type: String 
        Default: Project2InstanceKey
Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-VPC

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-InternetGateway

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway 
            VpcId: !Ref VPC 

    PublicSubnet1:
        Type: AWS::EC2::Subnet 
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AZ1a
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-PublicSubnet1

    PublicSubnet2:
        Type: AWS::EC2::Subnet 
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AZ1b
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-PublicSubnet2

    PrivateSubnet1:
        Type: AWS::EC2::Subnet 
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AZ1a
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-PrivateSubnet1

    PrivateSubnet2:
        Type: AWS::EC2::Subnet 
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref AZ1b
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-PrivateSubnet2 

    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc 

    NatGateway:
        Type: AWS::EC2::NatGateway 
        Properties:
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet1 
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-NatGateway 

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-PublicRoute 

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable 
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway 

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable 
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable 
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-PrivateRoute 

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        DependsOn: NatGateway
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable 
            SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable 
            SubnetId: !Ref PrivateSubnet2

    LoadBalancerSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group to allow connections into & from Load Balancer
            VpcId: !Ref VPC 
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80 
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              DestinationSecurityGroupId: !Ref WebServerSG
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-SecurityGroupforLoadBalancer 


    WebServerSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security Group to allow connections into & from Web Servers
            VpcId: !Ref VPC 
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80 
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              SourceSecurityGroupId: !Ref BastionSG
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0
            Tags:
            - Key: Name
              Value: !Sub ${EnvironmentName}-SecurityGroupforWebServers

    ElasticLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer 
        Properties:
            Subnets:
            - !Ref PublicSubnet1 
            - !Ref PublicSubnet2 
            SecurityGroups:
            - !Ref LoadBalancerSG
            Type: application
    
    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 5
            HealthCheckPath: / 
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 4
            HealthyThresholdCount: 2 
            Port: 80 
            Protocol: HTTP
            UnhealthyThresholdCount: 3
            VpcId: !Ref VPC 
            TargetType: instance 

    ELBListener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            LoadBalancerArn: !Ref ElasticLoadBalancer 
            Port: '80'
            Protocol: HTTP

    ELBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            - Field: path-pattern
              Values: [/] 
            ListenerArn: !Ref ELBListener 
            Priority: 1 

    myIAMRole:
        Type: AWS::IAM::Role
        Properties:
            Description: Role for EC2 instance to access the site hosted on S3 bucket
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: Allow
                  Principal: 
                    Service: 
                    - ec2.amazonaws.com
                  Action: "sts:AssumeRole"
            Path: "/" 
    RolePolicies:
        Type: AWS::IAM::Policy 
        Properties:
            PolicyName: Proj2S3Policy
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Action: 
                    - 's3:ListBucket'
                    Resource: 'arn:aws:s3:::project2bckt'
                Statement:
                  - Effect: "Allow"
                    Action: 
                    - 's3:GetObject'
                    Resource: 'arn:aws:s3:::project2bckt/*'
            Roles:
            - !Ref myIAMRole
    IAMInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            - !Ref myIAMRole

    myLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref AMIId
            SecurityGroups: 
            - !Ref WebServerSG
            InstanceType: !Ref InstanceTypeValue
            # KeyName: !Ref PrivateKeyName
            IamInstanceProfile: !Ref IAMInstanceProfile
            BlockDeviceMappings:
            - DeviceName: '/dev/sdk'
              Ebs:
                VolumeSize: '10'
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install unzip awscli -y
                    sudo apt-get install apache2 -y 
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    sudo aws s3 cp s3://project2bckt/udagram.zip .
                    sudo unzip -o udagram.zip

    myAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        DependsOn: ElasticLoadBalancer
        Properties:
            AutoScalingGroupName: myASG
            MinSize: '4'
            MaxSize: '4'
            DesiredCapacity: '4'
            LaunchConfigurationName: !Ref myLaunchConfig
            VPCZoneIdentifier: 
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            TargetGroupARNs:
            - !Ref WebAppTargetGroup

    BastionInstance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !Ref AMIId
            InstanceType: !Ref InstanceTypeValue
            KeyName: !Ref PrivateKeyName
            SubnetId: !Ref PublicSubnet1
            SecurityGroupIds:
            - !Ref BastionSG
            Tags:
            - Key: Name
              Value: !Sub '${AWS::StackName}-BastionInstance'

    BastionSG:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription:
                !Sub 'Security group for ${AWS::StackName} bastion host'
            VpcId: !Ref VPC

    BastionInbound:
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            GroupId: !Ref BastionSG
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

    BastionOutbound:
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
            GroupId: !Ref BastionSG
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            DestinationSecurityGroupId: !Ref WebServerSG

Outputs:

    VPC:
        Description: Reference to the VPC created
        Value: !Ref VPC
        Export:
            Name: !Sub ${EnvironmentName}-VPC 

    LoadBalancerDNS:
        Description: Reference to the Load Balancer created
        Value: !Join ['',["http://", !GetAtt [ElasticLoadBalancer,DNSName]]]
        Export:
            Name: !Sub ${EnvironmentName}-LoadBalancerDNS

    WebServerSecurityGroup:
        Description: Web Server Security Group 
        Value: !Ref WebServerSG
        Export:
            Name: !Sub ${EnvironmentName}-WebServerSG 

    PrivateSubnet1:
        Description: Private Subnet 1
        Value: !Ref PrivateSubnet1
        Export:
            Name: !Sub ${EnvironmentName}-PrivateSubnet1 

    PrivateSubnet2:
        Description: Private Subnet 2
        Value: !Ref PrivateSubnet2
        Export:
            Name: !Sub ${EnvironmentName}-PrivateSubnet2
